 // Create clients
 const int num_clients = 5; // You can adjust the number of clients
 client clients[num_clients];
 for (int i = 0; i < num_clients; ++i) {
     clients[i].id = i; // Assign unique IDs to clients
 }

 // List to hold messages
 list<message_structure> message_list;

 // Pointer to the head of the blockchain
 block* block_head = nullptr;

 // Simulate sending messages
 for (int i = 0; i < 10; ++i) { // Send 10 messages
     // Randomly select two different clients
     client* sender = &clients[distrib(gen) % num_clients];
     client* receiver = &clients[distrib(gen) % num_clients];

     // Ensure sender and receiver are different
     while (receiver->id == sender->id) {
         receiver = &clients[distrib(gen) % num_clients];
     }

     send_message(sender, receiver, message_list, block_head);
 }

 // Display the messages in the blocks (if any blocks have been created)
 if (block_head != nullptr) {
     std::cout << "Mensagens do bloco mais recente:\n";
     exibir_mensagens_block(block_head->numero, *block_head);
     std::cin.get();
 }
 else {
     std::cout << "Nenhum bloco foi criado.\n";
     std::cin.get();
 }


 std::cin.get();


